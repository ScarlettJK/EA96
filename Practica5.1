/*Hay n niños con dulces.
Se le proporciona un arreglo de caramelos enteros, donde cada caramelos[i] representa el número de caramelos que tiene cada niño,
 y un número entero extraCaramelos, que denota el número de caramelos adicionales que tiene.

Devuelve un resultado de una lista de valores verdadero o falso (Boolean) de longitud n, donde resultado[i] es verdadero si,
después de darle al i-ésimo niño todos los dulces extra, tendrá la mayor cantidad de dulces entre todos los niños, o falso en caso contrario.

Tenga en cuenta que varios niños pueden tener la mayor cantidad de dulces.
*/

import java.util.List;
import java.util.ArrayList;

class Solution {
    public List<Boolean> kidsWithCandies(List<Integer> candies, int extraCandies) {

    List<Boolean> result = new ArrayList<>();
    int greatest = 0;

    for(int i = 0; i < candies.size(); i++){
        greatest = candies.get(i);
    }

    for (int i = 0; i < candies.size(); i++){
        resultado(candies.get(i)+extraCandies >= greatest);
    }


    return result;
    }
}
/*

Example 1:

Input: candies = [2,3,5,1,3], extraCandies = 3
Output: [true,true,true,false,true]
Explanation: If you give all extraCandies to:
- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.
- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.
- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.
- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.
- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.
Example 2:

Input: candies = [4,2,1,1,2], extraCandies = 1
Output: [true,false,false,false,false]
Explanation: There is only 1 extra candy.
Kid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.
Example 3:

Input: candies = [12,1,12], extraCandies = 10
Output: [true,false,true]


Constraints:

n == candies.length
2 <= n <= 100
1 <= candies[i] <= 100
1 <= extraCandies <= 50

*/